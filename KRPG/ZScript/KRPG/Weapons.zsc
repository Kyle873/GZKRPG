enum WeaponUpgrade
{
    WU_DAMAGE,
    WU_ROF,
    WU_ACCURACY,
    WU_PELLET
}

class KWeapon : Weapon
{
    static const string UpgradeTypes[] =
    {
        "KDamageUpgrade",
        "KROFUpgrade",
        "KAccuracyUpgrade",
        "KPelletUpgrade"
    };

    static const string UpgradeColors[] =
    {
        "Red",
        "Orange",
        "Green",
        "Yellow"
    };

    const UpgradeMax = 5;
    
    int DamageUpgrade;
    int DamageUpgradeMax;
    int ROFUpgrade;
    int ROFUpgradeMax;
    int AccuracyUpgrade;
    int AccuracyUpgradeMax;
    int PelletUpgrade;
    int PelletUpgradeMax;

    string PuffType;
    
    property DamageUpgradeMax : DamageUpgradeMax;
    property ROFUpgradeMax : ROFUpgradeMax;
    property AccuracyUpgradeMax : AccuracyUpgradeMax;
    property PelletUpgradeMax : PelletUpgradeMax;

    property PuffType : PuffType;

    default
    {
        Weapon.BobStyle "Alpha";
        Weapon.BobSpeed 2.5;
        Weapon.BobRangeX 0.2;
        Weapon.BobRangeY 0.5;
        
        KWeapon.DamageUpgradeMax UpgradeMax;
        KWeapon.ROFUpgradeMax UpgradeMax;
        KWeapon.AccuracyUpgradeMax UpgradeMax;
        KWeapon.PelletUpgradeMax UpgradeMax;
    }
    
    override void PostBeginPlay()
    {
        super.PostBeginPlay();

        DamageUpgrade = 0;
        ROFUpgrade = 0;
        AccuracyUpgrade = 0;
        PelletUpgrade = 0;
    }

    virtual bool UpgradeDamage()
    {
        if (DamageUpgrade + 1 > DamageUpgradeMax)
            return false;

        DamageUpgrade++;

        return true;
    }

    virtual bool UpgradeROF()
    {
        if (ROFUpgrade + 1 > ROFUpgradeMax)
            return false;

        ROFUpgrade++;

        return true;
    }

    virtual bool UpgradeAccuracy()
    {
        if (AccuracyUpgrade + 1 > AccuracyUpgradeMax)
            return false;

        AccuracyUpgrade++;

        return true;
    }

    virtual bool UpgradePellet()
    {
        if (PelletUpgrade + 1 > PelletUpgradeMax)
            return false;

        PelletUpgrade++;

        return true;
    }
}

class KPistol : KWeapon
{
    default
    {
        Tag "Pistol";

        Weapon.SlotNumber 2;
        Weapon.AmmoUse 1;
		Weapon.AmmoGive 10;
        Weapon.AmmoType "KPistolAmmo";
		
        +Weapon.Wimpy_Weapon
    }

    states
    {
        Spawn:
            NPIS X -1;
            stop;
        Ready:
            NPIS A 1 A_WeaponReady();
            loop;
        Deselect:
            NPIS A 1 A_Lower();
            loop;
        Select:
            NPIS A 1 A_Raise();
            loop;
        Fire:
            NPIS A 0 A_SetTics(5 - Invoker.ROFUpgrade);
            NPIS B 4
            {
                A_FireBullets(5 - Invoker.AccuracyUpgrade, 0, 1 + Invoker.PelletUpgrade, 10 + (Invoker.DamageUpgrade * 5), Invoker.PuffType);
                A_StartSound("weapons/fire/pistol", CHAN_WEAPON);
                A_GunFlash();
            }
            NPIS CD 4;
            NPIS C 4 A_ReFire();
            goto Ready;
        Flash:
            NPIS B 4 Bright A_Light1();
            goto LightDone;
    }
}

class KRevolver : KWeapon
{
    default
    {
        Tag "Revolver";
		Scale 0.75;

        Weapon.SlotNumber 2;
        Weapon.AmmoUse 1;
        Weapon.AmmoGive 6;
        Weapon.AmmoType "KRevolverAmmo";
    }

    states
    {
        Spawn:
            REVO X -1;
            stop;
        Ready:
            REVO A 1 A_WeaponReady();
            loop;
        Deselect:
            REVO A 1 A_Lower();
            loop;
        Select:
            REVO A 1 A_Raise();
            loop;
        Fire:
            REVO B 3
			{
				A_StartSound("weapons/fire/revolver", CHAN_WEAPON);
				A_GunFlash();
			}
            REVO C 3 A_FireBullets(2 - (Invoker.AccuracyUpgrade * 0.4), 0, 1 + Invoker.PelletUpgrade, 20 + (Invoker.DamageUpgrade * 10), Invoker.PuffType);
            REVO D 0 A_SetTics(6 - Invoker.ROFUpgrade);
            REVO E 0 A_SetTics(6 - Invoker.ROFUpgrade);
            REVO D 0 A_SetTics(6 - Invoker.ROFUpgrade);
			REVO A 3;
            REVO A 6 A_ReFire();
            goto Ready;
        Flash:
            REVO B 3 Bright A_Light1();
            REVO C 3 Bright A_Light2();
            goto LightDone;
    }
}
